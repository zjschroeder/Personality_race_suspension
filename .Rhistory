factor(),
sex = c("female", "male", "female", "male",
"female", "male", "female", "male") %>%
factor()
)
nlsy_pt <- nlsy_pt %>%
mutate(
Percent =total_yes/(total_yes + total_no))
###########
## ADD HEALTH
add_pt <- tibble(
total_no = c(720038, 1076668, 5324124, 6522058, 731884, 972598, 263620, 332552),
total_yes = c(1000375, 681941, 2417160, 975055, 476266, 246398, 113382, 49626),
SE_no = c(54634, 57848, 156621, 151210, 60623, 68309, 32481, 38782),
SE_yes = c(68223, 50460, 117643, 70422, 50586, 33480, 29711, 14093),
race = c("black", "black",
"white", "white",
"latinx", "latinx",
"other", "other") %>%
factor(),
sex = c("male", "female", "male", "female",
"male", "female", "male", "female") %>%
factor()
)
add_pt <- add_pt %>%
mutate(
Percent = total_yes/(total_yes + total_no))
######## LIST
adj_prop <- list(nlsy_pt, add_pt)
names(adj_prop) <- c("NLSY_adj", "ADD_adj")
########## Output
map(adj_prop, pretty_table)
########## Adj Plot Function
adj_plot_f <- function(x)
{x %>%
ggplot() +
geom_col(aes(race, Percent, fill = sex),
position = "dodge") +
labs(title = "Proportion of Students Suspended",
caption = deparse(substitute(x)),
subtitle = "By Race and Gender",
x = "Race",
y = "Percent of students") +
ylim(0, 1) +
theme_apa() +
theme(legend.position = "none")
}
map(adj_prop, adj_plot_f)
# Chunk 14: Race x Gender Interaction Function
race_by_gender_interaction <- function(df){
name <- deparse(substitute(df))
rsm <- glm(ever_suspended ~ race * sex,
family = binomial, data = df)
sum <- summary(rsm)
plot <- plot_model(rsm, type = "pred", terms = c("race", "sex"))
emm <- emmeans(rsm, specs = pairwise ~ race | sex,
type = "response", adjust = "none")
assign(
x = paste0(name, "_rxg"),
value = list(rsm, sum, plot, emm),
envir = .GlobalEnv
)
}
race_by_gender_interaction(nlsy)
race_by_gender_interaction(add)
# Chunk 15
race_by_gender_interaction_adj <- function(df){
name <- deparse(substitute(df))
rsm <- svyglm(ever_suspended ~ race * sex,
family = quasibinomial,
design = df)
sum <- summary(rsm)
plot <- plot_model(rsm,
type = "pred",
terms = c("race", "sex"))
emm <- emmeans(rsm, specs = pairwise ~ race | sex,
type = "response", adjust = "none")
assign(
x = paste0(name, "_rxg"),
value = list(rsm, sum, plot, emm),
envir = .GlobalEnv
)
}
race_by_gender_interaction_adj(nlsy_adj)
race_by_gender_interaction_adj(add_adj)
# Chunk 16
print(nlsy_rxg)
print(nlsy_adj_rxg)
print(add_rxg)
print(add_adj_rxg)
# Chunk 17: Personality models and outputs
# CREADING LISTS OF OUR VARIOUS OUTPUTS
p_mod <- map(d, ~glm(ever_suspended ~ race * sex * score,
family = binomial,
data = .x))
p_sum <- map(p_mod, summary)
p_plot <- map(p_mod, ~plot_model(.x, type = "pred",
terms = c("score", "race", "sex"),
colors = c("red1", "deepskyblue2", "gray 79", "grey 66")))
p_emtrend_output <- map(p_mod, ~emtrends(.x, pairwise ~ race*sex,
var = "score",
adjust = "none"))
##### Merging lists
pers_models <- list(NULL)
for(i in seq_along(p_mod)){
pers_models[[i]] <-  list(p_mod[[i]], p_sum[[i]], p_plot[[i]], p_emtrend_output[[i]])
}
# Setting sub-component names
for(i in seq_along(pers_models)){
names(pers_models[[i]]) = c("Model", "Summary", "Plot", "Emtrend_Output")
}
# Setting names
names(pers_models) = paste0(names_list, names_data)
# Chunk 18: Searching for just p<.05
sig_values_funct(p_emtrend_output)
sig_values <- list(NULL)
for(i in seq_along(p_emtrend_output)){
sig_values[[i]] = summary(p_emtrend_output[[i]]$contrasts) %>%
as_tibble(.) %>%
filter(`p.value` < .05)}
names(sig_values) = paste0(names_list, names_data)
# Chunk 19: Personality models and outputs
# CREADING LISTS OF OUR VARIOUS OUTPUTS
p_mod_adj <- map(d_adj, ~svyglm(ever_suspended ~ race * sex * score,
family = binomial,
design = .x))
w <- plot_model(p_mod_adj$extrav_add, type = "pred",
terms = c("score", "race", "sex"))
p_sum_adj <- map(p_mod_adj, summary)
p_plot_adj <- map(p_mod_adj, ~plot_model(.x, type = "pred",
terms = c("score", "race", "sex"),
colors = c("red1", "deepskyblue2", "gray 66", "grey 79")))
for(i in 1:18){
p_mod_adj[i][["naive.cov"]] <- NULL
p_mod_adj[i][["cov.unscaled"]] <- NULL
p_mod_adj[i][["survey.design"]] <- NULL
}
emtrends(p_mod_adj$extrav_add, pairwise ~ race*sex,
var = "score",
adjust = "none",
weights = p_mod_adj$extrav_add$model$`(weights)`,
data = p_mod_adj$extrav_add$data)
p_emtrend_output_adj <- map(p_mod_adj, ~emtrends(.x,
pairwise ~ race*sex,
var = "score",
adjust = "none",
weights = .x$model$`(weights)`,
data = .x$data)
)
##### Merging lists
pers_models_adj <- list(NULL)
for(i in seq_along(p_mod_adj)){
pers_models_adj[[i]] <-  list(p_mod_adj[[i]], p_sum_adj[[i]], p_plot_adj[[i]], p_emtrend_output_adj[[i]])
}
# Setting sub-component names
for(i in seq_along(pers_models_adj)){
names(pers_models_adj[[i]]) = c("Model", "Summary", "Plot", "Emtrend_Output")
}
`# Setting names
names(pers_models_adj) = paste0(names_list, names_data_adj)
# Setting sub-component names
for(i in seq_along(pers_models_adj)){
names(pers_models_adj[[i]]) = c("Model (weighted)", "Summary (weighted)", "Plot #(weighted)", "Emtrend_Output (weighted)")
}
# Setting names
names(pers_models_adj) = paste0(names_list, names_data_adj)
# Chunk 20: Searching for just p<.05
sig_values_adj <- list(NULL)
for(i in seq_along(p_emtrend_output_adj)){
sig_values_adj[[i]] = summary(p_emtrend_output_adj[[i]]$contrasts) %>%
as_tibble(.) %>%
filter(`p.value` < .05)}
names(sig_values_adj) = paste0(names_list, names_data_adj)
# Chunk 21: Variance Loaded Modeling Function
var_loaded_funct <- function(model, trait){
plot <<- plot_model(model,
type = "pred",
terms = c(paste0(trait), "race", "sex"))
output <<- emtrends(model,
pairwise ~ race*sex,
var = paste0(trait),
adjust = "none")
}
# Chunk 25
#install and load pscl package
library(pscl)
#calculate McFadden's R-squared for model
pR2(nlsy_tipi_variance_model_adj)['McFadden']
# Chunk 26: Longitudinal Models and Output
nl <- nlsy_l %>%
select(pid:neuro_mi, race2:weight)%>%
melt(
id.vars = c("pid", "sex", "birth_year", "race", "race_full", "race2", "age_tipi", "ever_suspended", "weight", "school_group", "years", "value", "school_age"),
variable.name = "measure",
value.name = "score") %>%
split(., .$measure)
# CREADING LISTS OF OUR VARIOUS OUTPUTS
l_mod <- map(nl, ~glm(value ~ race * sex * score * school_group,
family = binomial, data = .x))
l_sum <- map(l_mod, summary)
l_plot <- map(l_mod, ~plot_model(.x, type = "pred",
terms = c("score", "race", "sex", "school_group")))
l_trends <- map(l_mod, ~emtrends(.x, pairwise ~ race * sex * school_group,
var = "score", adjust = "none")
)
##### Merging lists
l_models <- list(NULL)
for(i in seq_along(l_mod)){
l_models[[i]] <-  list(l_mod[[i]],
l_sum[[i]],
l_plot[[i]],
l_trends[[i]])
}
# Setting sub-component names
for(i in seq_along(l_models)){
names(l_models[[i]]) = c("Model", "Summary", "Plot", "Emtrend_Output")
}
# Setting names
names(l_models) <- names(nl)
# Chunk 27
sig_values <- list(NULL)
for(i in seq_along(l_trends)){
sig_values[[i]] = summary(l_trends[[i]]$contrasts) %>%
as_tibble(.) %>%
filter(`p.value` < .05)
}
names(sig_values) = names(nl)
print(sig_values)
# Chunk 28
sigval_ordered <- sig_values[order(names(sig_values))]
sigval_ordered_adj <- sig_values_adj[order(names(sig_values_adj))]
mods_ordered <- pers_models[order(names(pers_models))]
plots_ordered <- p_plot[order(names(p_plot))]
plots_ordered_adj <- p_plot_adj[order(names(p_plot_adj))]
# Chunk 29: Race X Gender Bar Chart
n <- nlsy_adj_rxg[[3]]$data  %>%
tibble()
n <- n %>%
mutate(
race = factor(n$x,
labels = c("Black", "White", "Latinx", "Other")),
dataset = "NLSY")
a <- add_adj_rxg[[3]]$data  %>%
tibble()
a <- a %>%
mutate(
race = factor(a$x, labels = c("Black", "White", "Latinx", "Other")),
dataset = "ADD Health")
d <- rbind(n, a)
d$group <- d$group %>%
forcats::fct_relevel("male", "female")
levels(d$group) <- c("Male", "Female")
d %>%
ggplot(aes(x = group, predicted, fill = race)) +
geom_col(position = "dodge") +
geom_errorbar(aes(x = group, ymin = conf.low, ymax = conf.high),
position = position_dodge(width = .9),
width = .2,
size = .5,
color = "gray35") +
scale_fill_manual(values = c("red1", "deepskyblue2", "gray 66", "grey 79")) +
labs(fill = "Race") +
facet_wrap(~dataset) +
ylab("Suspension Rate") +
xlab("Gender") +
theme_minimal()
# Chunk 30
display_funct <- function(i){
sigval_ordered[paste0(i)] %>%
print
plots_ordered[paste0(i)] %>%
print
plots_ordered_adj[paste0(i)] %>%
print
}
display_funct("optimism_add")
# Chunk 31
p_only <- svyglm(ever_suspended ~ open + extrav + agree + neuro + consc + anger + anxiety + optimism,
family = binomial,
design = add_adj)
p_only <- svyglm(ever_suspended ~ open + extrav + agree + neuro + consc,
family = binomial,
design = nlsy_adj)
pR2(p_only)['McFadden']
View(nlsy_rxg)
pers_models_adj$extrav_add
View(pers_models_adj)
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(warning = FALSE)
library(tidyverse)
library(lme4)
library(nlme)
library(psych)
library(finalfit)
library(naniar)
library(recipes)
library(stringr)
library(reshape2)
library(sjPlot)
library(emmeans)
library(purrr)
library(plotly)
library(jtools)
library(knitr)
library(kableExtra)
library(survey)
library(grid)
library(survival)
source("cleaning_functions.R")
here::here()
set_theme(base = theme_minimal())
load("data/data.rdata")
load("data/personality_measures.rdata")
nlsy <- rename(nlsy,
extrav = extra_tipi,
agree = agree_tipi,
consc = consc_tipi,
open= open_tipi,
neuro = neuro_tipi,
race = race1
)
nlsy_l <- rename(nlsy_l,
extrav = extra_tipi,
agree = agree_tipi,
consc = consc_tipi,
open= open_tipi,
neuro = neuro_tipi,
race = race1
)
nlsy <- nlsy %>%
select(pid:neuro_mi, race)
nlsy <- nlsy %>%
mutate(sex = tolower(sex) %>%
factor(),
race1 = race,
race = forcats::fct_collapse(race_full,
other = c("", "aapi",
"indig", "other")))
nlsy_l <- nlsy_l %>%
select(pid:neuro_mi, race:school_group)
add <- add %>%
mutate(ever_suspended = str_to_title(ever_suspended) %>%
factor(),
pid = as.character(pid) %>%
as.numeric()
)
nlsy$race <- nlsy$race %>%
forcats::fct_relevel("black" , "white" , "latinx", "other")
#################### SAMPLE WEIGHTS
###### NLSY
nlsy_w <- rio::import(here::here("data/nlsy_weights/customweight_nlscya_6260ed2f1804a9e8208.dat")) %>%
as_tibble()
names(nlsy_w) <- c("pid", "weight")
nlsy <- left_join(nlsy, nlsy_w, by = "pid") %>%
mutate(
pid = factor(pid)
)
###### NLSY LONG
nlsy_l <- full_join(nlsy_l, nlsy_w, by = "pid") %>%
mutate(
pid = factor(pid)
)
#str(nl)
###### ADD
add_w <- rio::import(here::here("data/add_weights.sav"))
names(add_w) <- c("pid", "cluster", "weight_long", "weight", "weight_long_w134")
add_w <- add_w %>%
mutate(
pid = as.character(pid) %>%
as.numeric()
)
add <- left_join(add, add_w, by = "pid") %>%
mutate(
pid = factor(pid)
)
#str(add)
data <- list(nlsy, add)
# CREATING MAP-ABLE LIST OF DATA
n <- nlsy %>% melt(
id.vars = c("pid", "sex", "birth_year", "race", "race_full", "race1", "age_tipi", "ever_suspended", "weight"),
variable.name = "measure",
value.name = "score") %>%
split(., .$measure)
a <- add %>% melt(
id.vars = c("pid", "sex", "birth_year", "race", "hispanic", "home_language",
"US_born", "grade_w1", "suspension_this_year", "ever_suspended",
"grade_last_suspended", "pid", "cluster", "weight_long", "weight", "weight_long_w134"),
variable.name = "measure",
value.name = "score") %>%
split(., .$measure)
d <- c(a, n)
names_list <- names(d)
names_data <- c(rep("_add", length(a)), rep("_nlsy", length(n)))
names(d) <- paste0(names_list, names_data)
############### Pretty Table Function
pretty_table <- function(df){
x <- deparse(substitute(df))
df %>%
kbl(caption = x) %>%
kable_classic(full_width = F, html_font = "Cambria")
}
############### FUNCTION
pdem <- function(df){
df %>%
group_by(race, sex) %>%
count(.) %>%
pretty_table(.)
}
################ ANALYSIS
pdem(nlsy)
pdem(add)
############### FUNCTION
pdem_plot <- function(df){
df %>%
ggplot() +
geom_bar(aes(str_to_title(race), fill = str_to_title(sex)),
position = "dodge") +
theme_apa() +
theme(legend.position = "bottom") +
labs(
x = "Race",
y = "N"
)
}
################ ANALYSIS
pdem_plot(nlsy)
pdem_plot(add)
```{r Print Gender x Race x Suspension modelsD}
View(data)
View(d)
rm(list = ls())
library(tidyverse)
library(lme4)
library(nlme)
library(psych)
library(finalfit)
library(naniar)
library(recipes)
library(stringr)
library(reshape2)
library(sjPlot)
library(emmeans)
library(purrr)
library(plotly)
library(jtools)
library(knitr)
library(kableExtra)
library(survey)
library(grid)
library(survival)
source("cleaning_functions.R")
here::here()
set_theme(base = theme_minimal())
load("data/data.rdata")
load("data/personality_measures.rdata")
load("/Users/zjschroeder/Dropbox (University of Oregon)/PROSS/Personality_race_suspension/data/21600-0001-Data.rda")
View(da21600.0001)
rm(list = ls())
load("data/data.rdata")
load("data/personality_measures.rdata")
View(nlsy)
load("data/data_NLSY_pos/RData")
load("data_NLSY_pos/RData")
load("data_NLSY_pos/rdata")
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(warning = FALSE)
```
# Data Import
## Libraries
```{r Packages, results='hide', message=FALSE}
library(tidyverse)
library(lme4)
library(nlme)
library(psych)
library(finalfit)
library(naniar)
library(recipes)
library(stringr)
library(reshape2)
library(sjPlot)
library(emmeans)
library(purrr)
library(plotly)
library(jtools)
library(knitr)
library(kableExtra)
library(survey)
library(grid)
library(survival)
source("cleaning_functions.R")
here::here()
```
```{r Preset Plotting Themes Plotting Themes}
set_theme(base = theme_minimal())
```
load("data_NLSY_pos/rdata")
load("data_NLSY_pos.rdata")
View(data_NLSY_pos)
nlsy_new <- data_NLSY_pos %>%
filter(CPUBID == nlsy$pid)
IDs <- nlsy$pid
nlsy_new <- data_NLSY_pos %>%
filter(CPUBID == IDs)
nlsy_new <- data_NLSY_pos %>%
filter(CPUBID %in% IDs)
View(nlsy_new)
View(NLSY_MINI_IPIP_QUESTIONS)
View(nlsy_new)
